// cliq
// The Jule CLI Library
// https://github.com/adamperkowski/cliq
// Copyright (c) 2025, Adam Perkowski
// BSD 3-Clause License

use er "internal/error"
use "std/fmt"
use "std/os"
use ss "std/strings"

enum ArgType: type {
	bool,
	str,
}

struct Builder {
	Args:     map[str]ArgType
	autoHelp: bool
}

impl Builder {
	fn Help(mut self): Builder {
		self.Args["help"] = false
		self.autoHelp = true
		ret self
	}

	fn Build(self): Cliq {
		let mut args: map[str]ArgType = {}

		for k, v in self.Args {
			args["--"+ss::TrimPrefix(k, "--")] = v
		}

		ret Cliq{
			args: args,
			autoHelp: self.autoHelp,
		}
	}
}

struct Cliq {
	cli:      []str
	args:     map[str]ArgType
	autoHelp: bool
}

impl Cliq {
	fn Get(self, key: str): any {
		arg := self.args["--"+ss::TrimPrefix(key, "--")]

		match type arg {
		| bool:
			ret bool(arg)
		| str:
			ret str(arg)
		|:
			ret arg
		}
	}

	fn GetCLI(mut self) {
		self.cli = os::Args()
	}

	fn SetCLI(mut self, cli: str) {
		self.cli = ss::Split(cli, " ")
	}

	fn Parse(mut self) {
		for i, _ in self.cli {
			for k, v in self.args {
				if self.cli[i] == k {
					match type v {
					| bool:
						self.args[k] = true
					| str:
						if len(self.cli)-1 > i {
							self.args[k] = self.cli[i+1]
						} else {
							self.displayError(er::VAL_REQUIRED, k)
						}
					}
				} else if self.cli[i] == "--no"+ss::TrimPrefix(k, "--") {
					match type v {
					| bool:
						self.args[k] = false
					|:
						self.displayError(er::NOFLAG_NOT_BOOL, k)
					}
				}
			}
		}

		match type self.args["--help"] {
		| bool:
			if bool(self.args["--help"]) && self.autoHelp {
				print(self.AutoHelp())
				os::Exit(0)
			}
		}
	}

	fn AutoHelp(self): str {
		mut maxWidth := 0
		for k, _ in self.args {
			if len(k) > maxWidth {
				maxWidth = len(k)
			}
		}

		mut res := "Flags:\n"
		for k, v in self.args {
			res += "   " + k + ss::Repeat(" ", maxWidth-len(k)) + "   "
			match type v {
			| bool:
				res += "bool\n"
			| str:
				res += "string\n"
			}
		}

		ret res
	}

	fn displayError(self, msg: str, msgArgs: ...any) {
		print("error: ")
		fmt::Printf(msg+"\n", msgArgs)

		println(er::TRY_HELP)

		os::Exit(2)
	}
}